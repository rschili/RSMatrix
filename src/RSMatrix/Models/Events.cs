using System.Text.Json;
using System.Text.Json.Serialization;

namespace RSMatrix.Models;

public class MatrixEvent
{
    [JsonPropertyName("content")]
    public JsonElement? Content { get; set; }
    [JsonPropertyName("type")]
    public required string Type { get; set; }
    [JsonPropertyName("sender")]
    public string? Sender { get; set; }

    [JsonExtensionData]
    public Dictionary<string, JsonElement>? AdditionalProps { get; set; }
}

public class ClientEventWithoutRoomID
{
    [JsonPropertyName("content")]
    public required JsonElement? Content { get; set; }

    [JsonPropertyName("type")]
    public required string Type { get; set; }

    [JsonPropertyName("sender")]
    public required string Sender { get; set; }

    [JsonPropertyName("event_id")]
    public required string EventId { get; set; }

    [JsonPropertyName("origin_server_ts")]
    public required long OriginServerTs { get; set; }

    /// <summary>
    /// Only set if it's a state event.
    /// </summary>
    [JsonPropertyName("state_key")]
    public string? StateKey { get; set; }

    [JsonPropertyName("unsigned")]
    public UnsignedData? Unsigned { get; set; }

    [JsonExtensionData]
    public Dictionary<string, JsonElement>? AdditionalProps { get; set; }
}

public class ClientEvent : ClientEventWithoutRoomID
{
    [JsonPropertyName("room_id")]
    public required string RoomId { get; set; }
}

public class CanonicalAliasEvent
{
    [JsonPropertyName("alias")]
    public string? Alias { get; set; }

    [JsonPropertyName("alt_aliases")]
    public List<string>? AltAliases { get; set; }
}

public class RoomNameEvent
{
    [JsonPropertyName("name")]
    public required string Name { get; set; }
}

public enum Presence
{
    [JsonPropertyName("offline")]
    Offline,
    [JsonPropertyName("online")]
    Online,
    [JsonPropertyName("unavailable")]
    Unavailable
}

public class PresenceRequest
{
    [JsonPropertyName("presence")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public required Presence Presence { get; set; }

    [JsonPropertyName("status_msg")]
    public string? StatusMsg { get; set; }
}

public class PresenceEvent
{
    [JsonPropertyName("avatar_url")]
    public string? AvatarUrl { get; set; }

    [JsonPropertyName("currently_active")]
    public bool? CurrentlyActive { get; set; }

    [JsonPropertyName("displayname")]
    public string? DisplayName { get; set; }

    [JsonPropertyName("last_active_ago")]
    public long? LastActiveAgo { get; set; } // milliseconds

    [JsonPropertyName("presence")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public Presence Presence { get; set; }

    [JsonPropertyName("status_msg")]
    public string? StatusMsg { get; set; }
}

public enum Membership
{
    [JsonPropertyName("invite")]
    Invite,
    [JsonPropertyName("join")]
    Join,
    [JsonPropertyName("knock")]
    Knock,
    [JsonPropertyName("leave")]
    Leave,
    [JsonPropertyName("ban")]
    Ban
}

public class RoomMemberEvent
{
    [JsonPropertyName("avatar_url")]
    public string? AvatarUrl { get; set; }

    [JsonPropertyName("displayname")]
    public string? DisplayName { get; set; }

    [JsonPropertyName("membership")]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public required Membership Membership { get; set; }

    [JsonPropertyName("reason")]
    public string? Reason { get; set; }

    /// <summary>
    /// Specifies if this is a direct message chat.
    /// </summary>
    [JsonPropertyName("is_direct")]
    public bool? IsDirect { get; set; }
}

public class UnsignedData
{
    /// <summary>
    /// The time in milliseconds that has elapsed since the event was sent.
    /// This field is generated by the local homeserver, and may be incorrect
    /// if the local time on at least one of the two servers is out of sync,
    /// which can cause the age to either be negative or greater than it actually is.
    /// </summary>
    [JsonPropertyName("age")]
    public long Age { get; set; }

    /// <summary>
    /// The room membership of the user making the request, at the time of the event.
    /// </summary>
    [JsonPropertyName("membership")]
    public string? Membership { get; set; }

    /// <summary>
    /// The previous content for this event. This field is generated by the local homeserver,
    /// and is only returned if the event is a state event, and the client has permission to see the previous content.
    /// </summary>
    [JsonPropertyName("prev_content")]
    public JsonElement? PrevContent { get; set; }

    /// <summary>
    /// The event that redacted this event, if any.
    /// </summary>
    [JsonPropertyName("redacted_because")]
    public JsonElement? RedactedBecause { get; set; }

    /// <summary>
    /// The client-supplied transaction ID, for example,
    /// provided via PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId},
    /// if the client being given the event is the same one which sent it.
    /// </summary>
    [JsonPropertyName("transaction_id")]
    public string? TransactionId { get; set; }
}



public class RoomMessageEvent
{
    [JsonPropertyName("body")]
    public required string Body { get; set; }

    [JsonPropertyName("msgtype")]
    public required string MsgType { get; set; }

    /// <summary>
    /// The format used in the formatted_body. Currently only org.matrix.custom.html is supported.
    /// </summary>
    [JsonPropertyName("format")]
    public string? Format { get; set; }

    [JsonPropertyName("formatted_body")]
    public string? FormattedBody { get; set; }
    
    [JsonPropertyName("m.mentions")]
    public RoomMessageMention? Mentions { get; set; }
}

public class RoomMessageMention
{
    [JsonPropertyName("user_ids")]
    public List<string>? UserIds { get; set; }
}

public class RoomEncryptionEvent
{
    [JsonPropertyName("algorithm")]
    public required string Algorithm { get; set; }
}

public class RoomEncryptedEvent
{
    [JsonPropertyName("algorithm")]
    public required string Algorithm { get; set; }

    [JsonPropertyName("ciphertext")]
    public required string Ciphertext { get; set; } // may also be a json element with a key of "body" and "type" (olm message type)

    // These are deprecated
    /*[JsonPropertyName("device_id")]
    public required string DeviceId { get; set; }

    [JsonPropertyName("sender_key")]
    public required string SenderKey { get; set; }*/

    [JsonPropertyName("session_id")]
    public required string SessionId { get; set; }
}